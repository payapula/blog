/** @jsx jsx */
import { jsx, css } from '@emotion/react';
import theme from 'prism-react-renderer/themes/dracula'
import {bpDesktopOnly} from 'styles/theme'
import Highlight, {defaultProps} from 'prism-react-renderer'

// Code is Provided by Kent.C.Dodds https://github.com/kentcdodds/kentcdodds.com/blob/main/src/components/mdx/code.js
// Same is used in chakra UI - https://github.com/chakra-ui/chakra-ui/blob/97b6b0111f21af8bfce675e34d7c32f3ff2cadf0/website/src/components/codeblock/highlight.tsx

const RE = /{([\d,-]+)}/

const wrapperStyles = css`
  overflow: auto;
  margin-left: -20px;
  margin-right: -20px;
  ${bpDesktopOnly} {
    margin-left: -80px;
    margin-right: -80px;
  }
`

const preStyles = css`
  float: left;
  min-width: 100%;
  overflow: initial;
  border-radius: 4px;
  font-size: 16px;
  padding: 10px;
`

function calculateLinesToHighlight(meta) {
  if (RE.test(meta)) {
    const lineNumbers = RE.exec(meta)[1]
      .split(',')
      .map(v => v.split('-').map(y => parseInt(y, 10)))
    return index => {
      const lineNumber = index + 1
      const inRange = lineNumbers.some(([start, end]) =>
        end ? lineNumber >= start && lineNumber <= end : lineNumber === start,
      )
      return inRange
    }
  } else {
    return () => false
  }
}

function Code({codeString, language, metastring}) {
  const shouldHighlightLine = calculateLinesToHighlight(metastring)
  return (
    <Highlight
      {...defaultProps}
      code={codeString}
      language={language}
      theme={theme}
    >
      {({className, style, tokens, getLineProps, getTokenProps}) => (
        <div css={wrapperStyles}>
          <pre className={className} style={style} css={preStyles}>
            {tokens.map((line, i) => (
              <div
                key={i}
                {...getLineProps({
                  line,
                  key: i,
                })}
                css={css`
                    ${shouldHighlightLine(i) && `
                    background-color: rgba(201, 167, 255, 0.2);
                    margin: 0;
                    padding: 0px 5px;
                    border-left: 5px solid rgb(201, 167, 255);
                    `}
                `
                }
              >
                <span
                  css={css`
                    display: inline-block;
                    width: 2em;
                    user-select: none;
                    opacity: 0.3;
                  `}
                >
                  {i + 1}
                </span>
                {line.map((token, key) => (
                  <span key={key} {...getTokenProps({token, key})} />
                ))}
              </div>
            ))}
          </pre>
        </div>
      )}
    </Highlight>
  )
}


// https://github.com/kentcdodds/kentcdodds.com/blob/cec91ed2b6c7235f69a419789e6d83d21553e57b/src/components/mdx/index.js

/**
 * We are doing this to support both <pre> and <code> tags generated by MDX
 *
 */
 function preToCodeBlock(preProps) {
    if (
      // children is code element
      preProps.children &&
      // code props
      preProps.children.props &&
      // if children is actually a <code>
      preProps.children.props.mdxType === 'code'
    ) {
      // we have a <pre><code> situation
      const {
        children: codeString,
        className = '',
        ...props
      } = preProps.children.props
  
      const matches = className.match(/language-(?<lang>.*)/)
  
      return {
        codeString: codeString.trim(),
        className,
        language:
          matches && matches.groups && matches.groups.lang
            ? matches.groups.lang
            : '',
        ...props,
      }
    }
  }


export {Code, preToCodeBlock}
