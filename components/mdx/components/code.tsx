import theme from 'styles/theme/dracula-soft';
import Highlight, { defaultProps, Language } from 'prism-react-renderer';
import { cn } from '@/lib/utils';

// Code is Provided by Kent.C.Dodds https://github.com/kentcdodds/kentcdodds.com/blob/main/src/components/mdx/code.js
// Same is used in chakra UI - https://github.com/chakra-ui/chakra-ui/blob/97b6b0111f21af8bfce675e34d7c32f3ff2cadf0/website/src/components/codeblock/highlight.tsx

function calculateLinesToHighlight(highlight: number[]) {
    if (highlight?.length) {
        const lineNumbers = highlight.map((v) => [v]);
        return (index) => {
            const lineNumber = index + 1;
            const inRange = lineNumbers.some(([start, end]) =>
                end ? lineNumber >= start && lineNumber <= end : lineNumber === start
            );
            return inRange;
        };
    } else {
        return () => false;
    }
}

function checkToHideLineNums(noline) {
    return !!noline;
}

interface CodeProps {
    codeString: string;
    language: Language;
    highlight: number[];
    noline: boolean;
}

function Code({ codeString, language, highlight, noline }: CodeProps): JSX.Element {
    const shouldHighlightLine = calculateLinesToHighlight(highlight);
    const shouldHideLineNums = checkToHideLineNums(noline);
    // const color = useColorModeValue('#0a1126', '#0a0707');
    return (
        <Highlight {...defaultProps} code={codeString} language={language} theme={theme}>
            {({ className, style, tokens, getLineProps, getTokenProps }) => {
                return (
                    <div
                        className="ml-[-20px] mr-[-20px] overflow-auto
                        xl:ml-[-60px]
                        xl:mr-[-60px]">
                        <pre
                            className={cn(
                                `min-w-full rounded-sm !bg-[#0a1126]
                                p-[10px] text-xs leading-relaxed lg:text-sm
                                xl:text-base xl:leading-relaxed dark:!bg-[#0a0707]
                            `,
                                className
                            )}
                            style={style}>
                            {tokens.map((line, i) => {
                                const highlightClasses =
                                    'm-0 ml-[-10px] py-0 px-1 border-s-4 border-solid border-[#82e6d9] bg-[#a7b9ff33]';
                                const highlightClassName = shouldHighlightLine(i)
                                    ? highlightClasses
                                    : '';
                                return (
                                    <div
                                        key={i}
                                        {...getLineProps({
                                            line,
                                            key: i
                                        })}
                                        className={highlightClassName}>
                                        {shouldHideLineNums ? (
                                            <span className="pl-[2em]"></span>
                                        ) : (
                                            <span className=" inline-block w-[2em] select-none text-[#f6f6f480]">
                                                {i + 1}
                                            </span>
                                        )}
                                        {line.map((token, key) => (
                                            <span key={key} {...getTokenProps({ token, key })} />
                                        ))}
                                    </div>
                                );
                            })}
                        </pre>
                    </div>
                );
            }}
        </Highlight>
    );
}

// https://github.com/kentcdodds/kentcdodds.com/blob/cec91ed2b6c7235f69a419789e6d83d21553e57b/src/components/mdx/index.js

/**
 * We are doing this to support both <pre> and <code> tags generated by MDX
 *
 */
function preToCodeBlock(preProps) {
    if (
        // children is code element
        preProps.children &&
        // code props
        preProps.children.props
    ) {
        const { highlight, noline } = preProps;
        const { children: codeString, className = '', ...props } = preProps.children.props;

        const matches = className.match(/language-(?<lang>.*)/);

        return {
            codeString: codeString.trim(),
            className,
            language: matches && matches.groups && matches.groups.lang ? matches.groups.lang : '',
            highlight,
            noline,
            ...props
        };
    }
}

export { Code, preToCodeBlock };
